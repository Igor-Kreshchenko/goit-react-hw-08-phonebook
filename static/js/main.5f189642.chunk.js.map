{"version":3,"sources":["components/Navigation/Navigation.module.css","components/AuthNav/AuthNav.module.css","components/UserMenu/UserMenu.module.css","components/Container/Container.module.css","components/AppBar/AppBar.module.css","redux/contacts/contacts-actions.js","components/Container/Container.js","components/Navigation/Navigation.js","components/AuthNav/AuthNav.js","components/UserMenu/default-avatar.png","components/UserMenu/UserMenu.js","components/AppBar/AppBar.js","components/PrivateRoute.js","components/PublicRoute.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","redux/auth/auth-actions.js","redux/auth/auth-reducer.js","redux/auth/auth-operations.js","redux/auth/auth-selectors.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContacts","Container","children","className","styles","connect","state","isAuthenticated","authSelectors","getIsAuthenticated","to","exact","link","activeClassName","activeLink","AuthNav","mapDispatchToProps","onLogout","authOperations","logOut","name","getUserName","avatar","defaultAvatar","container","src","alt","width","type","onClick","Header","Component","component","redirectTo","routeProps","render","props","restricted","HomeView","lazy","RegisterView","LoginView","ContactsView","App","this","onGetCurrentUser","fallback","path","getCurrentUser","itemsReducer","createReducer","_","payload","filter","id","filterReducer","loadingReducer","errorReducer","contactsReducer","combineReducers","items","loading","error","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","auth","persistReducer","authReducer","contacts","devTools","process","storePersistor","persistor","persistStore","ReactDOM","StrictMode","document","getElementById","registerRequest","registerSuccess","registerError","loginRequest","loginSuccess","loginError","authActions","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","initialUserState","email","user","token","axios","defaults","baseURL","headers","common","Authorization","register","credentials","dispatch","a","post","response","data","message","logIn","getState","persistedToken","get"],"mappings":"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","file":"static/js/main.5f189642.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"Navigation_link__f_tGE\",\"activeLink\":\"Navigation_activeLink__3A4Zy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"AuthNav_link__VjrKx\",\"activeLink\":\"AuthNav_activeLink__21maj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"UserMenu_container__3-C7E\",\"avatar\":\"UserMenu_avatar__1SNey\",\"name\":\"UserMenu_name__IijDN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__243fB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"AppBar_Header__10Jo8\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  'contacts/fetchContactsRequest',\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  'contacts/fetchContactsSuccess',\r\n);\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const filterContacts = createAction('contacts/filter');\r\n","import React from 'react';\r\nimport styles from './Container.module.css';\r\n\r\nconst Container = ({ children }) => (\r\n  <div className={styles.Container}>{children}</div>\r\n);\r\n\r\nexport default Container;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport styles from './Navigation.module.css';\r\nimport { authSelectors } from '../../redux/auth';\r\n\r\nconst Navigation = ({ isAuthenticated }) => (\r\n  <nav>\r\n    <NavLink\r\n      to=\"/\"\r\n      exact\r\n      className={styles.link}\r\n      activeClassName={styles.activeLink}\r\n    >\r\n      Главная\r\n    </NavLink>\r\n\r\n    {isAuthenticated && (\r\n      <NavLink\r\n        to=\"/contacts\"\r\n        exact\r\n        className={styles.link}\r\n        activeClassName={styles.activeLink}\r\n      >\r\n        Контакты\r\n      </NavLink>\r\n    )}\r\n  </nav>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(Navigation);\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport styles from './AuthNav.module.css';\r\n\r\nconst AuthNav = () => (\r\n  <div>\r\n    <NavLink\r\n      to=\"/register\"\r\n      className={styles.link}\r\n      activeClassName={styles.activeLink}\r\n      exact\r\n    >\r\n      Регистрация\r\n    </NavLink>\r\n    <NavLink\r\n      to=\"/login\"\r\n      exact\r\n      className={styles.link}\r\n      activeClassName={styles.activeLink}\r\n    >\r\n      Логин\r\n    </NavLink>\r\n  </div>\r\n);\r\n\r\nexport default AuthNav;\r\n","export default __webpack_public_path__ + \"static/media/default-avatar.e44fc4e2.png\";","import React from 'react';\r\nimport styles from './UserMenu.module.css';\r\nimport { connect } from 'react-redux';\r\nimport { authSelectors, authOperations } from '../../redux/auth';\r\nimport defaultAvatar from './default-avatar.png';\r\n\r\nconst UserMenu = ({ avatar, name, onLogout }) => (\r\n  <div className={styles.container}>\r\n    <img src={avatar} alt=\"\" width=\"32\" className={styles.avatar} />\r\n    <span className={styles.name}>Welcome, {name}</span>\r\n    <button type=\"button\" onClick={onLogout}>\r\n      Logout\r\n    </button>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  name: authSelectors.getUserName(state),\r\n  avatar: defaultAvatar,\r\n});\r\n\r\nconst mapDispatchToProps = { onLogout: authOperations.logOut };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserMenu);\r\n","import React from 'react';\r\nimport Navigation from '../Navigation';\r\nimport AuthNav from '../AuthNav';\r\nimport UserMenu from '../UserMenu';\r\nimport styles from './AppBar.module.css';\r\nimport { connect } from 'react-redux';\r\nimport { authSelectors } from '../../redux/auth';\r\n\r\nconst AppBar = ({ isAuthenticated }) => (\r\n  <header className={styles.Header}>\r\n    <Navigation />\r\n    {isAuthenticated ? <UserMenu /> : <AuthNav />}\r\n  </header>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(AppBar);\r\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { authSelectors } from '../redux/auth';\n\n/**\n * - Если маршрут приватный и пользователь залогинен, рендерит компонент\n * - В противном случае рендерит Redirect на /login\n */\nconst PrivateRoute = ({\n  component: Component,\n  isAuthenticated,\n  redirectTo,\n  ...routeProps\n}) => (\n  <Route\n    {...routeProps}\n    render={props =>\n      isAuthenticated ? <Component {...props} /> : <Redirect to={redirectTo} />\n    }\n  />\n);\n\nconst mapStateToProps = state => ({\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { authSelectors } from '../redux/auth';\n\n/**\n * - Если маршрут ограниченный, и пользователь залогинен, рендерит редирект на /todos\n * - В противном случае рендерит компонент\n */\nconst PublicRoute = ({\n  component: Component,\n  isAuthenticated,\n  redirectTo,\n  ...routeProps\n}) => (\n  <Route\n    {...routeProps}\n    render={props =>\n      isAuthenticated && routeProps.restricted ? (\n        <Redirect to={redirectTo} />\n      ) : (\n        <Component {...props} />\n      )\n    }\n  />\n);\n\nconst mapStateToProps = state => ({\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\n});\n\nexport default connect(mapStateToProps)(PublicRoute);\n","import React, { Component, Suspense, lazy } from 'react';\r\nimport Container from './components/Container';\r\nimport AppBar from './components/AppBar';\r\nimport { Switch } from 'react-router-dom';\r\nimport { authOperations } from './redux/auth';\r\nimport { connect } from 'react-redux';\r\nimport PrivateRoute from './components/PrivateRoute';\r\nimport PublicRoute from './components/PublicRoute';\r\n\r\nconst HomeView = lazy(() => import('./views/HomeView'));\r\nconst RegisterView = lazy(() => import('./views/RegisterView'));\r\nconst LoginView = lazy(() => import('./views/LoginView'));\r\nconst ContactsView = lazy(() => import('./views/ContactsView'));\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onGetCurrentUser();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <AppBar />\r\n\r\n        <Suspense fallback={<p>Loading...</p>}>\r\n          <Switch>\r\n            <PublicRoute exact path=\"/\" component={HomeView} />\r\n            <PublicRoute\r\n              path=\"/register\"\r\n              restricted\r\n              redirectTo=\"/contacts\"\r\n              component={RegisterView}\r\n            />\r\n            <PublicRoute\r\n              path=\"/login\"\r\n              restricted\r\n              redirectTo=\"/contacts\"\r\n              component={LoginView}\r\n            />\r\n            <PrivateRoute\r\n              path=\"/contacts\"\r\n              component={ContactsView}\r\n              redirectTo=\"/login\"\r\n            />\r\n          </Switch>\r\n        </Suspense>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  onGetCurrentUser: authOperations.getCurrentUser,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  filterContacts,\r\n} from './contacts-actions';\r\n\r\nconst itemsReducer = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [payload, ...state],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n  [filterContacts]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loadingReducer = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nconst errorReducer = createReducer(null, {\r\n  [fetchContactsRequest]: () => null,\r\n  [fetchContactsError]: () => true,\r\n  [addContactRequest]: () => null,\r\n  [addContactError]: () => true,\r\n  [deleteContactRequest]: () => null,\r\n  [deleteContactError]: () => true,\r\n});\r\n\r\nconst contactsReducer = combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n  loading: loadingReducer,\r\n  error: errorReducer,\r\n});\r\n\r\nexport default contactsReducer;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { contactsReducer } from './contacts';\r\nimport { authReducer } from './auth';\r\n\r\nconst middleware = getDefaultMiddleware({\r\n  serializableCheck: {\r\n    ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n  },\r\n});\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    auth: persistReducer(authPersistConfig, authReducer),\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nconst storePersistor = { store, persistor };\r\n\r\nexport default storePersistor;\r\n","import './index.css';\nimport 'modern-normalize/modern-normalize.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","import { createAction } from '@reduxjs/toolkit';\n\nconst registerRequest = createAction('auth/registerRequest');\nconst registerSuccess = createAction('auth/registerSuccess');\nconst registerError = createAction('auth/registerError');\n\nconst loginRequest = createAction('auth/loginRequest');\nconst loginSuccess = createAction('auth/loginSuccess');\nconst loginError = createAction('auth/loginError');\n\nconst logoutRequest = createAction('auth/logoutRequest');\nconst logoutSuccess = createAction('auth/logoutSuccess');\nconst logoutError = createAction('auth/logoutError');\n\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\n\nconst authActions = {\n  registerRequest,\n  registerSuccess,\n  registerError,\n  logoutRequest,\n  logoutSuccess,\n  logoutError,\n  loginRequest,\n  loginSuccess,\n  loginError,\n  getCurrentUserRequest,\n  getCurrentUserSuccess,\n  getCurrentUserError,\n};\n\nexport default authActions;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport authActions from './auth-actions';\n\nconst initialUserState = { name: null, email: null };\n\nconst user = createReducer(initialUserState, {\n  [authActions.registerSuccess]: (_, { payload }) => payload.user,\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\n  [authActions.logoutSuccess]: () => initialUserState,\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\n});\n\nconst token = createReducer(null, {\n  [authActions.registerSuccess]: (_, { payload }) => payload.token,\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\n  [authActions.logoutSuccess]: () => null,\n});\n\nconst error = createReducer(null, {\n  [authActions.registerError]: (_, { payload }) => payload,\n  [authActions.loginError]: (_, { payload }) => payload,\n  [authActions.logoutError]: (_, { payload }) => payload,\n  [authActions.getCurrentUserError]: (_, { payload }) => payload,\n});\n\nconst isAuthenticated = createReducer(false, {\n  [authActions.registerSuccess]: () => true,\n  [authActions.loginSuccess]: () => true,\n  [authActions.getCurrentUserSuccess]: () => true,\n  [authActions.registerError]: () => false,\n  [authActions.loginError]: () => false,\n  [authActions.getCurrentUserError]: () => false,\n  [authActions.logoutSuccess]: () => false,\n});\n\nexport default combineReducers({\n  user,\n  isAuthenticated,\n  token,\n  error,\n});\n","import axios from 'axios';\nimport authActions from './auth-actions';\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n  unset() {\n    axios.defaults.headers.common.Authorization = '';\n  },\n};\n\nconst register = credentials => async dispatch => {\n  dispatch(authActions.registerRequest());\n\n  try {\n    const response = await axios.post('/users/signup', credentials);\n\n    token.set(response.data.token);\n    dispatch(authActions.registerSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.registerError(error.message));\n  }\n};\n\nconst logIn = credentials => async dispatch => {\n  dispatch(authActions.loginRequest());\n\n  try {\n    const response = await axios.post('/users/login', credentials);\n\n    token.set(response.data.token);\n    dispatch(authActions.loginSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.loginError(error.message));\n  }\n};\n\nconst logOut = () => async dispatch => {\n  dispatch(authActions.logoutRequest());\n\n  try {\n    await axios.post('/users/logout');\n\n    token.unset();\n    dispatch(authActions.logoutSuccess());\n  } catch (error) {\n    dispatch(authActions.logoutError(error.message));\n  }\n};\n\nconst getCurrentUser = () => async (dispatch, getState) => {\n  const {\n    auth: { token: persistedToken },\n  } = getState();\n\n  if (!persistedToken) {\n    return;\n  }\n\n  token.set(persistedToken);\n  dispatch(authActions.getCurrentUserRequest());\n\n  try {\n    const response = await axios.get('/users/current');\n\n    dispatch(authActions.getCurrentUserSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.getCurrentUserError(error.message));\n  }\n};\n\nconst authOperations = { register, logOut, logIn, getCurrentUser };\n\nexport default authOperations;\n","const getIsAuthenticated = state => state.auth.isAuthenticated;\n\nconst getUserName = state => state.auth.user.name;\n\nconst authSelectors = {\n  getIsAuthenticated,\n  getUserName,\n};\n\nexport default authSelectors;\n"],"sourceRoot":""}